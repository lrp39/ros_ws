;; Auto-generated. Do not edit!


(when (boundp 'object_grabber::object_grabberGoal)
  (if (not (find-package "OBJECT_GRABBER"))
    (make-package "OBJECT_GRABBER"))
  (shadow 'object_grabberGoal (find-package "OBJECT_GRABBER")))
(unless (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL")
  (make-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))

(in-package "ROS")
;;//! \htmlinclude object_grabberGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(intern "*UPRIGHT_CYLINDER*" (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))
(shadow '*UPRIGHT_CYLINDER* (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))
(defconstant object_grabber::object_grabberGoal::*UPRIGHT_CYLINDER* 1)
(intern "*TOY_BLOCK*" (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))
(shadow '*TOY_BLOCK* (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))
(defconstant object_grabber::object_grabberGoal::*TOY_BLOCK* 2)
(intern "*TOY_BLOCK_APPROACH_DIST*" (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))
(shadow '*TOY_BLOCK_APPROACH_DIST* (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))
(defconstant object_grabber::object_grabberGoal::*TOY_BLOCK_APPROACH_DIST* 0.03)
(intern "*TOY_BLOCK_FINGER_OPENING*" (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))
(shadow '*TOY_BLOCK_FINGER_OPENING* (find-package "OBJECT_GRABBER::OBJECT_GRABBERGOAL"))
(defconstant object_grabber::object_grabberGoal::*TOY_BLOCK_FINGER_OPENING* 80.0)
(defclass object_grabber::object_grabberGoal
  :super ros::object
  :slots (_object_code _object_frame ))

(defmethod object_grabber::object_grabberGoal
  (:init
   (&key
    ((:object_code __object_code) 0)
    ((:object_frame __object_frame) (instance geometry_msgs::PoseStamped :init))
    )
   (send-super :init)
   (setq _object_code (round __object_code))
   (setq _object_frame __object_frame)
   self)
  (:object_code
   (&optional __object_code)
   (if __object_code (setq _object_code __object_code)) _object_code)
  (:object_frame
   (&rest __object_frame)
   (if (keywordp (car __object_frame))
       (send* _object_frame __object_frame)
     (progn
       (if __object_frame (setq _object_frame (car __object_frame)))
       _object_frame)))
  (:serialization-length
   ()
   (+
    ;; int32 _object_code
    4
    ;; geometry_msgs/PoseStamped _object_frame
    (send _object_frame :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _object_code
       (write-long _object_code s)
     ;; geometry_msgs/PoseStamped _object_frame
       (send _object_frame :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _object_code
     (setq _object_code (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; geometry_msgs/PoseStamped _object_frame
     (send _object_frame :deserialize buf ptr-) (incf ptr- (send _object_frame :serialization-length))
   ;;
   self)
  )

(setf (get object_grabber::object_grabberGoal :md5sum-) "d81e7273ad73668c76470a44f4a0baa1")
(setf (get object_grabber::object_grabberGoal :datatype-) "object_grabber/object_grabberGoal")
(setf (get object_grabber::object_grabberGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#object_grabber action message
#pass in an object code and the object's frame (w/rt named frame_id)
#object_grabber will plan approach, grasp and lift of object
#returns codes regarding outcome

int32 UPRIGHT_CYLINDER = 1
int32 TOY_BLOCK = 2
float64 TOY_BLOCK_APPROACH_DIST = 0.03
float64 TOY_BLOCK_FINGER_OPENING = 80.0 #expect gripper closed on toy block has this much finger separation
#add more objects here...

#goal:
int32 object_code
geometry_msgs/PoseStamped object_frame

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :object_grabber/object_grabberGoal "d81e7273ad73668c76470a44f4a0baa1")


