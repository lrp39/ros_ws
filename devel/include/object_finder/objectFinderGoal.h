// Generated by gencpp from file object_finder/objectFinderGoal.msg
// DO NOT EDIT!


#ifndef OBJECT_FINDER_MESSAGE_OBJECTFINDERGOAL_H
#define OBJECT_FINDER_MESSAGE_OBJECTFINDERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_finder
{
template <class ContainerAllocator>
struct objectFinderGoal_
{
  typedef objectFinderGoal_<ContainerAllocator> Type;

  objectFinderGoal_()
    : object_id(0)
    , known_surface_ht(false)
    , surface_ht(0.0)
    , object_dimension1(0.0)
    , object_dimension2(0.0)
    , object_dimension3(0.0)  {
    }
  objectFinderGoal_(const ContainerAllocator& _alloc)
    : object_id(0)
    , known_surface_ht(false)
    , surface_ht(0.0)
    , object_dimension1(0.0)
    , object_dimension2(0.0)
    , object_dimension3(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _object_id_type;
  _object_id_type object_id;

   typedef uint8_t _known_surface_ht_type;
  _known_surface_ht_type known_surface_ht;

   typedef float _surface_ht_type;
  _surface_ht_type surface_ht;

   typedef float _object_dimension1_type;
  _object_dimension1_type object_dimension1;

   typedef float _object_dimension2_type;
  _object_dimension2_type object_dimension2;

   typedef float _object_dimension3_type;
  _object_dimension3_type object_dimension3;


    enum { UPRIGHT_CYLINDER = 1 };
     enum { HORIZONTAL_CYLINDER = 2 };
     enum { CUBE = 3 };
     enum { PRISM = 4 };
     enum { SPHERE = 5 };
     enum { COKE_CAN_UPRIGHT = 100 };
     enum { TOY_BLOCK = 101 };
 

  typedef boost::shared_ptr< ::object_finder::objectFinderGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_finder::objectFinderGoal_<ContainerAllocator> const> ConstPtr;

}; // struct objectFinderGoal_

typedef ::object_finder::objectFinderGoal_<std::allocator<void> > objectFinderGoal;

typedef boost::shared_ptr< ::object_finder::objectFinderGoal > objectFinderGoalPtr;
typedef boost::shared_ptr< ::object_finder::objectFinderGoal const> objectFinderGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_finder::objectFinderGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_finder::objectFinderGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_finder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'roscpp': ['/opt/ros/indigo/share/roscpp/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib': ['/opt/ros/indigo/share/actionlib/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'object_finder': ['/home/lrp39/ros_ws/devel/share/object_finder/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'tf': ['/opt/ros/indigo/share/tf/cmake/../msg'], 'pcl_msgs': ['/opt/ros/indigo/share/pcl_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_finder::objectFinderGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_finder::objectFinderGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_finder::objectFinderGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_finder::objectFinderGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_finder::objectFinderGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_finder::objectFinderGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_finder::objectFinderGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eca04c660bac7e9a8bc67804b3248ae6";
  }

  static const char* value(const ::object_finder::objectFinderGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeca04c660bac7e9aULL;
  static const uint64_t static_value2 = 0x8bc67804b3248ae6ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_finder::objectFinderGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_finder/objectFinderGoal";
  }

  static const char* value(const ::object_finder::objectFinderGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_finder::objectFinderGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#objectFinder.action\n\
#goal:\n\
#define object codes...add more!\n\
#some generic solid objects:\n\
int32 UPRIGHT_CYLINDER = 1\n\
int32 HORIZONTAL_CYLINDER = 2\n\
int32 CUBE = 3\n\
int32 PRISM = 4\n\
int32 SPHERE = 5\n\
\n\
#some very specific objects...add more!\n\
#better: read these in from a database that is more easily augmented\n\
int32 COKE_CAN_UPRIGHT=100\n\
int32 TOY_BLOCK=101\n\
\n\
#goal fields to fill in:\n\
#identify the object, along with its stable pose type (e.g., upright, horizontal, on faceN)\n\
int32 object_id\n\
#boolean to declare if object is on a horizontal surface of known height:\n\
bool known_surface_ht\n\
#if surface ht is known, fill it in\n\
float32 surface_ht\n\
#optionally, provide dimensions that parameterize generic shapes\n\
#dim1 is a radius (for sphere or cylinder) or length (for cube or prism)\n\
float32 object_dimension1\n\
#dim2 is height (for cylinder or prism)\n\
float32 object_dimension2\n\
#dim3 is width (for prism)\n\
float32 object_dimension3\n\
\n\
";
  }

  static const char* value(const ::object_finder::objectFinderGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_finder::objectFinderGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.known_surface_ht);
      stream.next(m.surface_ht);
      stream.next(m.object_dimension1);
      stream.next(m.object_dimension2);
      stream.next(m.object_dimension3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objectFinderGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_finder::objectFinderGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_finder::objectFinderGoal_<ContainerAllocator>& v)
  {
    s << indent << "object_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "known_surface_ht: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.known_surface_ht);
    s << indent << "surface_ht: ";
    Printer<float>::stream(s, indent + "  ", v.surface_ht);
    s << indent << "object_dimension1: ";
    Printer<float>::stream(s, indent + "  ", v.object_dimension1);
    s << indent << "object_dimension2: ";
    Printer<float>::stream(s, indent + "  ", v.object_dimension2);
    s << indent << "object_dimension3: ";
    Printer<float>::stream(s, indent + "  ", v.object_dimension3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_FINDER_MESSAGE_OBJECTFINDERGOAL_H
